{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction';\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_NEW_LIST: \"SET_NEW_LIST\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    itemActive: false,\n    listMarkedForDeletion: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: payload.top5List,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: false,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            isListNameEditActive: true,\n            isItemEditActive: false,\n            listMarkedForDeletion: null\n          });\n        }\n\n      default:\n        return store;\n    }\n  };\n\n  store.setNewList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_NEW_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    store.enableXButton();\n  };\n\n  store.addTop5List = function () {\n    let newKey = store.newListCounter;\n    let newName = \"Untitled\" + newKey;\n    let newList = {\n      key: newKey,\n      name: newName,\n      items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n    };\n\n    async function asyncAddTop5List() {\n      const response = await api.createTop5List(newList);\n\n      if (response.data.success) {\n        store.setNewList(response.data.top5List._id);\n      }\n    }\n\n    asyncAddTop5List();\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n  // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        top5List.name = newName;\n\n        async function updateList(top5List) {\n          response = await api.updateTop5ListById(top5List._id, top5List);\n\n          if (response.data.success) {\n            async function getListPairs(top5List) {\n              response = await api.getTop5ListPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    top5List: top5List\n                  }\n                });\n              }\n            }\n\n            getListPairs(top5List);\n          }\n        }\n\n        updateList(top5List);\n      }\n    }\n\n    asyncChangeListName(id);\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    tps.clearAllTransactions();\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getTop5ListPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n    store.disableXButton();\n    store.checkRedo();\n    store.checkUndo();\n  }; // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n  // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n  // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n  // moveItem, updateItem, updateCurrentList, undo, and redo\n\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n          store.history.push(\"/top5list/\" + top5List._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    store.enableXButton();\n  };\n\n  store.addMoveItemTransaction = function (start, end) {\n    let transaction = new MoveItem_Transaction(store, start, end);\n    tps.addTransaction(transaction);\n  };\n\n  store.addChangeItemTransaction = function (index, oldText, newText) {\n    let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n    tps.addTransaction(transaction);\n  };\n\n  store.changeItem = function (index, text) {\n    store.currentList.items[index] = text;\n    store.updateCurrentList();\n  };\n\n  store.moveItem = function (start, end) {\n    start -= 1;\n    end -= 1;\n\n    if (start < end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i < end; i++) {\n        store.currentList.items[i] = store.currentList.items[i + 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } else if (start > end) {\n      let temp = store.currentList.items[start];\n\n      for (let i = start; i > end; i--) {\n        store.currentList.items[i] = store.currentList.items[i - 1];\n      }\n\n      store.currentList.items[end] = temp;\n    } // NOW MAKE IT OFFICIAL\n\n\n    store.updateCurrentList();\n  };\n\n  store.updateCurrentList = function () {\n    async function asyncUpdateCurrentList() {\n      const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUpdateCurrentList();\n  };\n\n  store.undo = function () {\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  };\n\n  store.showDelete = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getTop5ListById(id);\n\n      if (response.data.success) {\n        let top5List = response.data.top5List;\n        response = await api.updateTop5ListById(top5List._id, top5List);\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: top5List\n          });\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.add(\"is-visible\");\n    console.log(store.idNamePairs);\n  };\n\n  store.deleteMarkedList = function () {\n    async function asyncDeleteTop5List() {\n      const response = await api.deleteTop5ListById(store.currentList._id);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: null\n        });\n      }\n    }\n\n    asyncDeleteTop5List().catch(e => {});\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n    store.loadIdNamePairs();\n  };\n\n  store.hideDeleteListModal = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_CURRENT_LIST,\n      payload: null\n    });\n    let modal = document.getElementById(\"delete-modal\");\n    modal.classList.remove(\"is-visible\");\n  };\n\n  store.disableXButton = function () {\n    let button = document.getElementById(\"close-button\");\n    button.classList.add(\"top5-button-disabled\");\n  };\n\n  store.enableXButton = function () {\n    let button = document.getElementById(\"close-button\");\n    button.classList.remove(\"top5-button-disabled\");\n  };\n\n  store.checkRedo = function () {\n    if (!tps.hasTransactionToRedo()) {\n      let button = document.getElementById(\"redo-button\");\n      button.classList.add(\"top5-button-disabled\");\n    } else {\n      let button = document.getElementById(\"redo-button\");\n      button.classList.remove(\"top5-button-disabled\");\n    }\n  };\n\n  store.checkUndo = function () {\n    if (!tps.hasTransactionToUndo()) {\n      let button = document.getElementById(\"undo-button\");\n      button.classList.add(\"top5-button-disabled\");\n    } else {\n      let button = document.getElementById(\"undo-button\");\n      button.classList.remove(\"top5-button-disabled\");\n    }\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"3FRAmbSo6sFbcN0StEjON5Xn67M=\");","map":{"version":3,"sources":["/Users/cheng0913/Desktop/Top5Lists_HW3/Top5Lists_HW3/client/src/store/index.js"],"names":["createContext","useState","jsTPS","api","MoveItem_Transaction","ChangeItem_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","LOAD_ID_NAME_PAIRS","SET_NEW_LIST","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","itemActive","listMarkedForDeletion","storeReducer","action","type","payload","top5List","isListNameEditActive","isItemEditActive","setNewList","id","asyncSetCurrentList","response","getTop5ListById","data","success","updateTop5ListById","_id","history","push","enableXButton","addTop5List","newKey","newName","newList","key","name","items","asyncAddTop5List","createTop5List","changeListName","asyncChangeListName","updateList","getListPairs","getTop5ListPairs","pairsArray","closeCurrentList","clearAllTransactions","loadIdNamePairs","asyncLoadIdNamePairs","console","log","disableXButton","checkRedo","checkUndo","setCurrentList","addMoveItemTransaction","start","end","transaction","addTransaction","addChangeItemTransaction","index","oldText","newText","changeItem","text","updateCurrentList","moveItem","temp","i","asyncUpdateCurrentList","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive","showDelete","modal","document","getElementById","classList","add","deleteMarkedList","asyncDeleteTop5List","deleteTop5ListById","catch","e","remove","hideDeleteListModal","button","hasTransactionToRedo","hasTransactionToUndo"],"mappings":"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","sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nimport MoveItem_Transaction from '../transactions/MoveItem_Transaction'\nimport ChangeItem_Transaction from '../transactions/ChangeItem_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_NEW_LIST: \"SET_NEW_LIST\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        itemActive: false,\n        listMarkedForDeletion: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: payload.top5List,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            case GlobalStoreActionType.SET_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter+1,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: false,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    isListNameEditActive: true,\n                    isItemEditActive: false,\n                    listMarkedForDeletion: null\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    store.setNewList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_NEW_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n        store.enableXButton();\n    }\n    store.addTop5List = function () {\n        let newKey = store.newListCounter;\n        let newName = \"Untitled\" + newKey;\n        let newList = {\n            key: newKey,\n            name: newName,\n            items: [\"?\", \"?\", \"?\", \"?\", \"?\"]\n        };\n        async function asyncAddTop5List() {\n            const response = await api.createTop5List(newList);\n            if (response.data.success) {\n                store.setNewList(response.data.top5List._id)\n            }\n        }\n        asyncAddTop5List();\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n                top5List.name = newName;\n                async function updateList(top5List) {\n                    response = await api.updateTop5ListById(top5List._id, top5List);\n                    if (response.data.success) {\n                        async function getListPairs(top5List) {\n                            response = await api.getTop5ListPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        top5List: top5List\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(top5List);\n                    }\n                }\n                updateList(top5List);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        tps.clearAllTransactions();\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getTop5ListPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n        store.disableXButton();\n        store.checkRedo();\n        store.checkUndo();\n    }\n\n    // THE FOLLOWING 8 FUNCTIONS ARE FOR COORDINATING THE UPDATING\n    // OF A LIST, WHICH INCLUDES DEALING WITH THE TRANSACTION STACK. THE\n    // FUNCTIONS ARE setCurrentList, addMoveItemTransaction, addUpdateItemTransaction,\n    // moveItem, updateItem, updateCurrentList, undo, and redo\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                    store.history.push(\"/top5list/\" + top5List._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n        store.enableXButton();\n    }\n    store.addMoveItemTransaction = function (start, end) {\n        let transaction = new MoveItem_Transaction(store, start, end);\n        tps.addTransaction(transaction);\n    }\n    store.addChangeItemTransaction = function (index, oldText, newText) {\n        let transaction = new ChangeItem_Transaction(store, index, oldText, newText);\n        tps.addTransaction(transaction);\n    }\n    store.changeItem = function (index, text) {\n        store.currentList.items[index]=text;\n        store.updateCurrentList();\n    }\n    store.moveItem = function (start, end) {\n        start -= 1;\n        end -= 1;\n        if (start < end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i < end; i++) {\n                store.currentList.items[i] = store.currentList.items[i + 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n        else if (start > end) {\n            let temp = store.currentList.items[start];\n            for (let i = start; i > end; i--) {\n                store.currentList.items[i] = store.currentList.items[i - 1];\n            }\n            store.currentList.items[end] = temp;\n        }\n\n        // NOW MAKE IT OFFICIAL\n        store.updateCurrentList();\n    }\n    store.updateCurrentList = function() {\n        async function asyncUpdateCurrentList() {\n            const response = await api.updateTop5ListById(store.currentList._id, store.currentList);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                });\n            }\n        }\n        asyncUpdateCurrentList();\n    }\n    store.undo = function () {\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n    store.showDelete = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getTop5ListById(id);\n            if (response.data.success) {\n                let top5List = response.data.top5List;\n\n                response = await api.updateTop5ListById(top5List._id, top5List);\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: top5List\n                    });\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.add(\"is-visible\");\n        console.log(store.idNamePairs)\n    }\n    store.deleteMarkedList = function () {\n        async function asyncDeleteTop5List() {\n            const response = await api.deleteTop5ListById(store.currentList._id);\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: null\n                });\n            }\n        }\n        asyncDeleteTop5List().catch((e) => {\n        });\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n        store.loadIdNamePairs();\n    }\n    store.hideDeleteListModal = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: null\n        });\n        let modal = document.getElementById(\"delete-modal\");\n        modal.classList.remove(\"is-visible\");\n    }\n    store.disableXButton = function () {\n        let button = document.getElementById(\"close-button\");\n        button.classList.add(\"top5-button-disabled\");\n    }\n    store.enableXButton = function () {\n        let button = document.getElementById(\"close-button\");\n        button.classList.remove(\"top5-button-disabled\");\n    }\n    store.checkRedo = function () {\n        if (!tps.hasTransactionToRedo()) {\n            let button = document.getElementById(\"redo-button\");\n            button.classList.add(\"top5-button-disabled\");\n        }\n        else {\n            let button = document.getElementById(\"redo-button\");\n            button.classList.remove(\"top5-button-disabled\");\n        }\n    }\n    store.checkUndo = function () {\n        if (!tps.hasTransactionToUndo()) {\n            let button = document.getElementById(\"undo-button\");\n            button.classList.add(\"top5-button-disabled\");\n        }\n        else {\n            let button = document.getElementById(\"undo-button\");\n            button.classList.remove(\"top5-button-disabled\");\n        }\n    }\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"]},"metadata":{},"sourceType":"module"}